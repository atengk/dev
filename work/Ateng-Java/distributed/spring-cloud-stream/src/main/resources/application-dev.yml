# nacos 配置
spring:
  cloud:
    nacos:
      # nacos:8848 服务地址
      server-addr: 192.168.1.10:30648
      username: nacos
      password: Admin@123
      discovery:
        # 注册组
        group: ${spring.profiles.active}
        namespace: a8126e6d-5758-4f5b-b892-2522a250074c
      config:
        # 配置组
        group: ${spring.profiles.active}
        namespace: a8126e6d-5758-4f5b-b892-2522a250074c
  config:
    import: # 引入配置nacos中的配置application-common.yml
      - optional:nacos:application-common.yml
      - optional:nacos:${spring.application.name}.yml
---
# Spring Cloud Stream RabbitMQ 配置
#spring:
#  cloud:
#    stream:
#      default:
#        binder: rabbit-default
#        group: ateng-${spring.application.name:-0}-${spring.profiles.active:-0}
#        content-type: application/json
#      rabbit:
#        bindings:
#          myUser-in-0:
#            consumer:
#              auto-bind-dlq: true
#              dead-letter-exchange: my-user-dlx
#          myUserDelay-out-0:
#            producer:
#              delayed-exchange: true
#          myUserDelay-in-0:
#            consumer:
#              delayed-exchange: true
#          myUserBatch-in-0:
#            consumer:
#              acknowledge-mode: AUTO  # AUTO or MANUAL
#              max-concurrency: 3
#              enable-batching: true
#              batch-size: 100
#              receive-timeout: 5000
#          myUserManual-in-0:
#            consumer:
#              acknowledge-mode: MANUAL
#              #auto-bind-dlq: true
#              requeue-rejected: false
#              republish-to-dlq: false
#          myUserTwo-in-0:
#            consumer:
#              auto-bind-dlq: true
#          myUserTwoDlq-in-0:
#            consumer:
#              auto-bind-dlq: false
#              acknowledge-mode: AUTO
#              binding-routing-key: my-user-two.ateng-spring-cloud-stream-dev
#              exchange-type: direct
#          atengTopic-out-0:
#            producer:
#              routing-key: "routingkey.ateng"
#              exchange-type: topic
#          atengTopic-in-0:
#            consumer:
#              exchange-type: topic
#              binding-routing-key: routingkey.ateng
#              bind-queue: false
#              declare-exchange: false
#              queue-name-group-only: true
#      binders:
#        rabbit-default:
#          type: rabbit
#          environment:
#            spring.rabbitmq.addresses: 192.168.1.10:29210
#            spring.rabbitmq.username: admin
#            spring.rabbitmq.password: Admin@123
#            spring.rabbitmq.virtual-host: /
#      # 生产者 & 消费者绑定
#      bindings:
#        myUser-out-0:
#          destination: my-user
#        myUser-in-0:
#          destination: my-user
#          consumer:
#            max-attempts: 5
#        myUserDelay-out-0:
#          destination: my-user-delay
#        myUserDelay-in-0:
#          destination: my-user-delay
#        myUserBatch-out-0:
#          destination: my-user-batch
#        myUserBatch-in-0:
#          destination: my-user-batch
#          consumer:
#            batch-mode: true
#        myUserManual-out-0:
#          destination: my-user-manual
#        myUserManual-in-0:
#          destination: my-user-manual
#          consumer:
#            max-attempts: 3
#        myUserTwo-out-0:
#          destination: my-user-two
#        myUserTwo-in-0:
#          destination: my-user-two
#          consumer:
#            max-attempts: 3
#        myUserTwoDlq-in-0:
#          destination: DLX
#          group: my-user-two.ateng-spring-cloud-stream-dev.dlq
#        atengTopic-out-0:
#          destination: exchange-ateng
#          group: queue-ateng
#        atengTopic-in-0:
#          destination: exchange-ateng
#          group: queue-ateng
#    # 启用 Consumer 函数
#    function:
#      definition: myUser;myUserDelay;myUserBatch;myUserManual;myUserTwo;myUserTwoDlq;atengTopic
---
# Spring Cloud Stream Kafka 配置
#spring:
#  cloud:
#    stream:
#      default:
#        binder: kafka-default
#        group: ateng-${spring.application.name:-0}-${spring.profiles.active:-0}
#        content-type: application/json
#      binders:
#        kafka-default:
#          type: kafka
#          environment:
#            spring.cloud.stream.kafka.binder.brokers: 192.168.1.10:9094
#            spring.cloud.stream.kafka.binder.producer-properties:
#              max.request.size: 10485760  # 生产者最大请求大小 10MB
#            spring.cloud.stream.kafka.binder.consumer-properties:
#              fetch.max.bytes: 10485760  # 消费者最大拉取大小 10MB
#              auto.offset.reset: earliest  # earliest or latest
#        kafka-other:
#          type: kafka
#          environment:
#            spring.cloud.stream.kafka.binder.brokers: 47.108.163.211:22286
#            spring.cloud.stream.kafka.binder.producer-properties:
#              max.request.size: 10485760  # 生产者最大请求大小 10MB
#            spring.cloud.stream.kafka.binder.consumer-properties:
#              fetch.max.bytes: 10485760  # 消费者最大拉取大小 10MB
#              auto.offset.reset: earliest  # earliest or latest
#      # 生产者 & 消费者绑定
#      bindings:
#        myUserBatch-out-0:
#          destination: my-user-batch
#        myUserBatch-in-0:
#          destination: my-user-batch
#          consumer:
#            batch-mode: true
#            concurrency: 3
#        myUserManual-out-0:
#          destination: my-user-manual
#        myUserManual-in-0:
#          destination: my-user-manual
#          consumer:
#            max-attempts: 3
#        myUserDql-in-0:
#          binder: kafka-default
#          destination: my-user-dql
#          group: ateng-group
#          content-type: text/plain
#        myUserOther-out-0:
#          binder: kafka-other
#          destination: my-user-other
#        myUserOther-in-0:
#          binder: kafka-other
#          destination: my-user-other
#      # 配置属性
#      kafka:
#        bindings:
#          myUserBatch-in-0:
#            consumer:
#              configuration:
#                fetch.max.bytes: 10485760
#                fetch.min.bytes: 100000  # 最小获取字节数
#                fetch.max.wait.ms: 5000   # 最大等待时间
#                max.poll.records: 100     # 每次最多拉取 100 条记录
#          myUserManual-in-0:
#            consumer:
#              ack-mode: MANUAL
#              enable-dlq: true
#              dlq-name: my-user-dql
#    # 启用 Consumer 函数
#    function:
#      definition: myString;myUser;myUserBatch;myUserManual;myUserDql;myUserOther
---
# Spring Cloud Stream RocketMQ 配置
spring:
  cloud:
    stream:
      default:
        binder: rocketmq-default
        group: ateng-${spring.application.name:-0}-${spring.profiles.active:-0}
        content-type: application/json
      binders:
        rocketmq-default:
          type: rocketmq
          environment:
            spring.cloud.stream.rocketmq.binder.name-server: 192.168.1.13:9876
      # 生产者 & 消费者绑定
      bindings:
        myString-out-0:
          destination: my-string
          content-type: text/plain
        myString-in-0:
          destination: my-string
          content-type: text/plain
        myUser-out-0:
          destination: my-user
        myUser-in-0:
          destination: my-user
        myUserParam-out-0:
          destination: my-user-param
        myUserParam-in-0:
          destination: my-user-param
    # 启用 Consumer 函数
    function:
      definition: myString;myUser;myUserParam

